# SmartKey Kubernetes KMS Plugin


### Getting Started (Developer) ####
Prerequisite:
1. Steps need to be executed in Kubernetecs cluster
2. GoLang must be installed
3. Git pull this project

This project allow to use SmartKey as KMS provider for kubernetecs. Refer [link](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) to understand how kubernetes work with external KMS.
Take checkout of current project.

# Command to test, build or clean project (from inside project). This is only for developers who want to build binary of grpc server manually.
    - Run below command to test code
        $ make test
    - Run below command to build code
        $ make build
    - Run below command to clean workspace
        $ make clean

# Build command will generate smartkey-kms binary (only for developers who want to run gRPC server directly without using installer created in next steps).
  - Execute below command to run binary. In next sections we will see how we can create installer and use that to run plugin.
    - make build (to build your code and get smartkey-kms)
    - sudo ./smartkey-kms --socketFile <sock-file-path> --config <config-file->
        - sock-file-path:  Path where you want to create your unix socket file eg: /etc/ssl/certs/smartkey.socket
        - config-file: Path to your config file. eg: conf/smartkey-grpc.conf

# Sample "smartkey-grpc.conf" file
    {
      "smartkeyApiKey": "<smartkey-api-key>",
	  "encryptionKeyUuid": "<uuid-for-aes-encryption-key-in-SmartKey>",
	  "iv": "<Initialization vector for your AES algo as per your key size (128, 192, 256)>",
	  "socketFile": "<path-to-your-sock-file>",
	  "smartkeyURL": "<smartkey-url>"
	}

# Creating Debian installer from plugin binary
  - Install below tools
    - sudo apt-get install dh-make
    - sudo apt-get install devscripts build-essential lintian
 - Execute script "create_installer.sh". It will create deb file in one level above your PWD

### Installation ####
# Installing and configuring Plugin from Debian installer
  - Execute below command to install package
    - sudo dpkg -i smartkey-kmsplugin_1.0-1_amd64.deb
  - Above command only install plugin binary in your machine but don't start it.
  - *We need to do configure our config files before starting service.
  - Update configuration at "/etc/smartkey/smartkey-grpc.conf". Refer above section for more details.
  - Execute below command to run plugin gRPC server 
    - sudo service smartkey-grpc start

# Configure api-server to use "SmartKey Kubernetes KMS Plugin"
Open "/etc/kubernetes/manifests/kube-apiserver.yaml" file and add below configuration. You can find sample "smartkey.yaml" file in projects config folder. 
      The installer will automatically create one and copy to the desired (/etc/smartkey/) location for you with prepopulated configuration.

    - spec.containers.command.kube-apiserver
        --encryption-provider-config=/etc/ssl/certs/smartkey.yaml

    Add "volumemount" and "volume host path" to kube-apiserver.yaml. 
    Without below configuration, api-server won't be able to read smartkey.yaml and smartkey.sock files.


    =====
    volumeMounts:
       - mountPath: /etc/smartkey
           name: smartkey-kms
           readOnly: true
    ...
    ...
    volumes:
       - hostPath:
           path: /etc/smartkey
           type: DirectoryOrCreate
    ====
    **Installer will not add above configurations and need to be added manually.


Save "kube-apiserver.yaml" and exit. Apiserver will detect changes in "kube-apiserver.yaml" file and restart.
    
 # Verify if plugin is configured correctly
    - Create new secret and you should be able to see logs in plugin service logs. 
    - User below command to see logs
        -   journalctl -xe
    - Command to create new secret which will be encrypted by our plugin.
        -   kubectl create secret generic install3 -n default --from-literal=es-engkey=equinixdata
    - Command to encrypt all of your existing secrets.
        -   kubectl get secrets --all-namespaces -o json | kubectl replace -f -
    
# Troubleshooting
    1. Permission denied error while trying to encrypt old secrets using below command
        Create new secret and you should be able to see logs in plugin service logs. 
        $ kubectl get secrets --all-namespaces -o json | kubectl replace -f -
        Fix: Make sure that kubernetes config directory has the same permissions as kubernetes config file.
            $ mkdir -p $HOME/.kube
            $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
            $ sudo chown $(id -u):$(id -g) $HOME/.kube/config 
            Add change permissions on $HOME/.kube/ directory.
                $ sudo chown $(id -u):$(id -g) $HOME/.kube/

# Support email
    ES-ENG-SECURITY <ES-ENG-SECURITY@equinix.com>